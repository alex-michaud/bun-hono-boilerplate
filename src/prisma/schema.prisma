// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgres"
  // We need to provide a stub value for the db url because prisma will throw a valid postgres url is not provided
  url        = "postgresql://localhost:5432/mydb"
  extensions = [citext()]
}

model User {
  id            String    @id @default(ulid())
  name          String
  email         String?   @unique @db.Citext
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
}

model Session {
  id        String   @id @default(ulid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id @default(ulid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id        String   @id @default(ulid())
  title     String?
  content   String?  @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?     @relation(fields: [userId], references: [id])
  comments Comment[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(ulid())
  content   String?  @db.Text
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post? @relation(fields: [postId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([postId])
}
